import pandas as pd
import numpy as np

from tqdm import tqdm

import requests
from multiprocessing import Pool, set_start_method

import math
from itertools import repeat

from tkinter import *
from tkinter import filedialog

from PyQt5.QtGui import *
from PyQt5.QtCore import *
from PyQt5.QtWidgets import *

import os
import sys

import warnings
warnings.filterwarnings('ignore')

# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'untitled.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


class MainWindow(QMainWindow):
    
    def __init__(self):
        super().__init__()

        self.window_width, self.window_height = 800, 370
        # self.setMinimumSize(self.window_width, self.window_height)
        self.setWindowTitle('경찰청 신고 데이터 전처리 자동화 프로그램')
        self.setStyleSheet("""
            QMenuBar {
                background-color: #000000;
                color: rgb(255,255,255);
                border: 1px solid #000;
            }B983FF

            QMenuBar::item {
                background-color: rgb(49,49,49);
                color: rgb(255,255,255);
            }
            
            QMenuBar::item::selected {
                background-color: rgb(30,30,30);
            }

            QMainWindow {
                background-color: #FFFEFF;
                border: 1px solid black;
            }

            QLabel {
                background-color: #94B3FD;
                border: 1.5px solid black;
                border-color: #B983FF

            }

            QPushButton {
                background-color: #94B3FD;
                border: 1.5px solid black;
                border-color: #B983FF
            }
            """)
        
        self.setWindowFlags(Qt.WindowStaysOnTopHint)
        self.setGeometry(100, 100, self.window_width, self.window_height)
        self.setWindowIcon(QIcon('./image_files/colorful_daegu.jpg')) # icon.png 대신 원하는 아이콘을

        menubar = self.menuBar()
        menu1 = QMenu('&File', self)
        
        openAction = QAction('&Open', self)
        exitAction = QAction('&Exit', self)
        exitAction.triggered.connect(qApp.quit)
        menu1.addAction(openAction)
        menu1.addAction(openAction)
        menu1.addAction(exitAction)

        menu2 = QMenu('&Help', self)

        menubar.addMenu(menu1)
        menubar.addMenu(menu2)

        self.initUI()
        self.show()
        


    def initUI(self):

        self.ui_chk = False

        self.window_layout = QGridLayout()  

        ''' Horizon 1 '''
        horizon1 = QHBoxLayout()

        path_label = QLabel("File Path", self)
        font = QFont()
        font.setFamily("나눔스퀘어 Bold")
        font.setPointSize(10)
        font.setWeight(50)
        path_label.setFont(font)
        path_label.setFrameShape(QFrame.Box) # 테두리
        path_label.setAlignment(Qt.AlignCenter)
        horizon1.addWidget(path_label, 20)


        self.upload_path_label = QLabel("경찰청 신고 데이터 파일을 등록해주세요", self)
        font = QFont()
        font.setFamily("나눔스퀘어")
        font.setPointSize(10)
        font.setWeight(50)
        self.upload_path_label.setFont(font)
        self.upload_path_label.setFrameShape(QFrame.Box)
        self.upload_path_label.setAlignment(Qt.AlignCenter)
        horizon1.addWidget(self.upload_path_label, 60)

        # color: rgb(58, 134, 255);
        upload_btn = QPushButton("Upload")
        upload_btn.setStyleSheet('''
            QPushButton:hpoover{
                color: rgb(58, 134, 255);
                background-color: white;
                border: 1.5px solid rgb(255, 0, 110);
                border-radius: 3px;}
            ''')
        font = QFont()
        font.setFamily("나눔스퀘어")
        font.setPointSize(10)
        font.setWeight(50)
        upload_btn.setFont(font)
        upload_btn.setMaximumHeight(500)
        upload_btn.clicked.connect(self.upload_btn_clicked)
        horizon1.addWidget(upload_btn, 20)

        self.window_layout.addLayout(horizon1, 0, 0, 2, 0)

        ''' IMAGE 1 Label '''
        direction_image1 = QLabel('▼')
        self.window_layout.addWidget(direction_image1, 2, 0, 1, 0)

        ''' IMAGE Button'''
        image_btn = QPushButton()
        image_btn.setStyleSheet(
            '''
            QPushButton{image:url(./image_files/kakao_map.png); border: 0px;}
            QPushButton:hover{
                color: rgb(58, 134, 255);
                background-color: white;
                border: 1.5px solid rgb(255, 0, 110);}
            ''')
        image_btn.clicked.connect(self.open_kakao_webbrowser)
        self.window_layout.addWidget(image_btn, 3, 0, 2, 0)


        ''' IMAGE 2 Label '''
        direction_image2 = QLabel('▼')
        self.window_layout.addWidget(direction_image2, 5, 0, 1, 0)


        ''' Preprocessing Button '''
        preprocessing_btn = QPushButton('전처리 시작')
        font = QFont()
        font.setFamily("나눔스퀘어 Bold")
        font.setPointSize(20)
        preprocessing_btn.setFont(font)
        # preprocessing_btn.clicked.connect()
        self.window_layout.addWidget(preprocessing_btn, 6, 0, 3, 0)


        centralWidget = QWidget()
        centralWidget.setLayout(self.window_layout)
        self.setCentralWidget(centralWidget)



        '''
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QMenuBar(MainWindow)
        self.menubar.setGeometry(QRect(0, 0, 801, 26))
        self.menu_File = QMenu(self.menubar)
        self.menu_Help = QMenu(self.menubar)
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QStatusBar(MainWindow)
        MainWindow.setStatusBar(self.statusbar)
        self.action_About = QAction(MainWindow)
        icon = QIcon()
        icon.addPixmap(QPixmap("free-icons-info-icon-11553443890pmaubjcmu1.png"), QIcon.Normal, QIcon.Off)
        self.action_About.setIcon(icon)
        self.action_Ne = QAction(MainWindow)
        self.menu_File.addAction(self.action_Ne)
        self.menu_Help.addAction(self.action_About)
        self.menubar.addAction(self.menu_File.menuAction())
        self.menubar.addAction(self.menu_Help.menuAction())

        self.retranslateUi(MainWindow)
        QMetaObject.connectSlotsByName(MainWindow)
        '''

    def upload_btn_clicked(self):
        self.response = self.getFileName()

        self.horizon_layout_2 = QHBoxLayout()

        if self.response:
            self.upload_path_label.setText(self.response.split('/')[-1])

            if self.response.endswith('.csv'):
                df = pd.read_csv(self.response)
            else:
                df = pd.read_excel(self.response)

        if self.ui_chk == True:
            self.vertical_layout_2_1.removeWidget(self.vertical_layout_2_1)
            self.vertical_layout_2_2.removeWidget(self.vertical_layout_2_2)
            

        # Vertical 1 
        self.vertical_layout_2_1 = QVBoxLayout()
        # Vertical 2
        self.vertical_layout_2_2 = QVBoxLayout()

        api1_line_edit = QLineEdit()
        api1_line_edit.setPlaceholderText("첫번째 API Key를 넣어주세요")
        api1_line_edit.setMaximumSize(QSize(500, 100))
        font = QFont()
        font.setFamily("나눔스퀘어 Bold")
        api1_line_edit.setFont(font)

        self.vertical_layout_2_1.addWidget(api1_line_edit)
        self.horizon_layout_2.addLayout(self.vertical_layout_2_1)

        api_chk_btn1 = QPushButton("Key Check 1")
        font = QFont()
        font.setFamily("나눔스퀘어 Bold")
        font.setPointSize(10)
        font.setWeight(75)
        api_chk_btn1.setFont(font)
        self.vertical_layout_2_2.addWidget(api_chk_btn1)
        self.horizon_layout_2.addLayout(self.vertical_layout_2_2)

            
        if df.shape[0] > 150_000:
            api2_line_edit = QLineEdit()
            api2_line_edit.setPlaceholderText("두번째 API Key를 넣어주세요")
            api2_line_edit.setMaximumSize(QSize(500, 100))
            font = QFont()
            font.setFamily("나눔스퀘어 Bold")
            api2_line_edit.setFont(font)        
            self.vertical_layout_2_1.addWidget(api2_line_edit)

            api_chk_btn2 = QPushButton("Key Check 2")
            font = QFont()
            font.setFamily("나눔스퀘어 Bold")
            font.setPointSize(10)
            font.setWeight(75)
            api_chk_btn2.setFont(font)
            self.vertical_layout_2_2.addWidget(api_chk_btn2)
            self.horizon_layout_2.addLayout(self.vertical_layout_2_2)
            
            self.ui_chk = True

        self.window_layout.addLayout(self.horizon_layout_2, 2, 1, 1, 0) 
        self.show()




    def getFileName(self):

        file_filter = 'CSV File (*.csv) ;; Excel File (*.xlsx *.xls)'

        respose = QFileDialog.getOpenFileName(
            parent=self,
            caption='Select a data File',
            directory=os.getcwd(),
            filter=file_filter,
        )

        return respose[0]

    def open_kakao_webbrowser(self):
        import webbrowser

        webbrowser.open('https://apis.map.kakao.com/web/guide/')

    def preprocessing_btn_click(self):
        return

  

    def retranslateUi(self, MainWindow):
        _translate = QCoreApplication.translate

        self.menu_File.setTitle(_translate("MainWindow", "&File"))
        self.menu_Help.setTitle(_translate("MainWindow", "&Help"))
        self.action_About.setText(_translate("MainWindow", "&About..."))
        self.action_Ne.setText(_translate("MainWindow", "New"))



if __name__ == "__main__":
    app = QApplication(sys.argv)
    w = MainWindow()
    sys.exit(app.exec_())


class UIFactory:
    def getButton(self):
        pass

    def getLabel(self):
        pass

class mainFacotry(UIFactory):
    def getButton(self):
        return 

    def getLabel(self):
        pass

factory = mainFacotry()
mainFacotry.getButton()
mainFacotry.getLabel()  



'''
def open():
    win.filename = filedialog.askopenfile(
        initialdir=os.getcwd(),
        title='경찰청 신고 데이터 파일을 찾아주세요',
        filetypes=(("csv files", "*.csv"), ("excel files", "*.xlsx"), ("all files", "*.*"))
    )

    my_label = Label(win, text=win.filename)
    my_label.place(relx=0.3, rely=0.1)
'''
    

# my_btn = Button(win, text='Open File', command=open, width=10, height=1, overrelief='solid')

# pd.read_csv(win.filename)


class KaKaoAPI(object):
    def __inti_(self, key1, key2):
        self.__rest_api_key1 = key1
        self.__rest_api_key2 = key2

    def get_kakao_api(self):

        # Set rest api key options
        header = {'Authorization': 'KakaoAK ' + self.__rest_api_key1}

        return header

    @staticmethod
    def api_key_check(api_key):

        return
        
        
class KaKaoApiFirst(KaKaoAPI):
    
    def __str__(cls):
        return f'create {cls.__class__.__name__} instance'
    
    def get_kakao_api(self, df: pd.DataFrame, col: str):

        header = super().get_kakao_api()
        
        raw = df.reset_index(drop=True)

        for idx in tqdm(range(len(raw))):
            
            try:
                query = raw[col].iloc[idx]
            except KeyError as err:
                print(f'Key Error : {err}는 잘못된 컬럼명 입니다. 주소 컬럼명을 다시 확인해주세요')
            else:
                url = f'https://dapi.kakao.com/v2/local/search/address.json?query={query}'

            try:
                r = requests.get(url, headers=header)
            except requests.exceptions.ConnectionError as err1:
                print("Error Connecting : ", err1)
            except requests.exceptions.HTTPError as err2:
                print("Http Error : ", err2)
            # Any Error except upper exception
            except requests.exceptions.RequestException as err3:
                print("AnyException : ", err3)

            # 서버에 Request 요청
            if r.status_code == 200:
                result = r.json()
            else:
                result = "ERROR[" + str(r.status_code) + "]"

            try:
                raw.loc[idx, 'lo'] = float(result['documents'][0]['address']['x'])
                raw.loc[idx, 'la'] = float(result['documents'][0]['address']['y'])
            except IndexError as e:
                continue
            except TypeError as e:
                raw.loc[idx, 'lo'] = np.nan
                raw.loc[idx, 'lo'] = np.nan
        
        return raw


class KaKaoApiSecond(KaKaoAPI):
    
    def __str__(cls):
        return f'create {cls.__class__.__name__} instance'
    
    def get_kakao_api(self, df: pd.DataFrame, col: str):

        header = super().get_kakao_api()
        
        raw = df.reset_index(drop=True)

        for idx in tqdm(range(len(raw))):
            
            try:
                query = raw[col].iloc[idx]
            except KeyError as err:
                print(f'Key Error : {err}는 잘못된 컬럼명 입니다. 주소 컬럼명을 다시 확인해주세요')
            else:
                url = f'https://dapi.kakao.com/v2/local/search/address.json?query={query}'

            try:
                r = requests.get(url, headers=header)
            except requests.exceptions.ConnectionError as err1:
                print("Error Connecting : ", err1)
            except requests.exceptions.HTTPError as err2:
                print("Http Error : ", err2)
            # Any Error except upper exception
            except requests.exceptions.RequestException as err3:
                print("AnyException : ", err3)

            # 서버에 Request 요청
            if r.status_code == 200:
                result = r.json()
            else:
                result = "ERROR[" + str(r.status_code) + "]"

            try:
                raw.loc[idx, 'lo'] = float(result['documents'][0]['address']['x'])
                raw.loc[idx, 'la'] = float(result['documents'][0]['address']['y'])
            except IndexError as e:
                continue
            except TypeError as e:
                raw.loc[idx, 'lo'] = np.nan
                raw.loc[idx, 'lo'] = np.nan
        
        return raw    


def execute_kakao_api(api_instance: KaKaoAPI, df: pd.DataFrame, col: str):
    api_instance.get_kakao_api(df, col)


def parallel_processing(df: pd.DataFrame, col):
    """ 데이터프레임을 N개로 분할하여, 멀티프로세싱을 이용해 병렬처리하여 데이터프레임을 합치는 함수

    Returns
    --------
    df : pd.DataFrame
    """

    def my_split(df: pd.DataFrame):
        '''파일 실행하는 하드웨어의 (cpu 개수/3개)를 사용하여 

        '''
        
        num = math.ceil(os.cpu_count()/3)

        try:
            df_split = np.array_split(df, num)
        except ValueError as err:
            print('Error : {err}')
        else:
            return num, df_split
    
    num, df_split = my_split(df)
    
    try:
        with Pool(processes=num) as pool:
            df = pd.concat(pool.map(execute_kakao_api, df_split, repeat(col, num)), axis=0)
    except MemoryError as err:
        print('Error : {err}')
    else:
        df = df.sort_values(by=['rcp_de', 'rcp_tm']).reset_index(drop=True)

    return df

import math

math

if __name__ == '__main__':
    
    def a():
        a = 5

        
